console.log('This site was generated by Hugo.');

console.log(`%c hugo-theme-XMT %c https://github.com/ccfread/hugo-theme-XMT`,"background: #FF735A;border:1px solid #FF735A; padding: 1px; border-radius: 2px 0 0 2px; color: #fff;","border:1px solid #FF735A; padding: 1px; border-radius: 0 2px 2px 0; color: #FF735A;")

// 检查window.config是否已经定义
if (!window.config) {
  window.config = {};
}
document.addEventListener("DOMContentLoaded", () => {
  Wap_Sidebar();
  Overflow_Close();
  initRunSiteTime();
  initHighlight();
  gototop();
  tagsyum();
 // initTable();
});

// 声明一个全局数组变量
var globaImglArray = [];


function tagsyum(){
  const entries = [];
  const colors = [
    "#F8D800",
    "#0396FF",
    "#EA5455",
    "#7367F0",
    "#32CCBC",
    "#F6416C",
    "#28C76F",
    "#9F44D3",
    "#F55555",
    "#736EFE",
    "#E96D71",
    "#DE4313",
    "#D939CD",
    "#4C83FF",
    "#F072B6",
    "#C346C2",
    "#5961F9",
    "#FD6585",
    "#465EFB",
    "#FFC600",
    "#FA742B",
    "#5151E5",
    "#BB4E75",
    "#FF52E5",
    "#49C628",
    "#00EAFF",
    "#F067B4",
    "#F067B4",
    "#ff9a9e",
    "#00f2fe",
    "#4facfe",
    "#f093fb",
    "#6fa3ef",
    "#bc99c4",
    "#46c47c",
    "#f9bb3c",
    "#e8583d",
    "#f68e5f",
  ];
  const random = (min, max) => {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };


  $(".XMT_aside_item-contain .cloud li").each((i, item) => {
    entries.push({
      label: $(item).attr("data-label"),
      url: $(item).attr("data-url"),
      target: "_blank",
      fontColor: colors[random(0, colors.length - 1)],
      fontSize: 15,
    });
  });
  $(".XMT_aside_item-contain .tag").svg3DTagCloud({
    entries,
    width: 220,
    height: 220,
    radius: "65%",
    radiusMin: 75,
    bgDraw: false,
    fov: 800,
    speed: 1.5,
    fontWeight: 500,
    opacityOver: 1.00,
    opacityOut: 0.05,
    opacitySpeed: 6,
  });

}


function Overflow_Close() {
  $(".header_hyal").on("click", function () {
    $("body").css("overflow", "");
    $(".header_hyal").removeClass("active slideout");
    $(".header_roll").removeClass("active");
  });
}

function Wap_Sidebar() {
  $(".header_internal-slideicon").on("click", function () {
    $(".header_search").removeClass("active");
    if ($(".header_roll").hasClass("active")) {
      $("body").css("overflow", "");
      $(".header_hyal").removeClass("active slideout");
      $(".header_roll").removeClass("active");
    } else {
      $("body").css("overflow", "overflow");
      $(".header_hyal").addClass("active slideout");
      $(".header_roll").addClass("active");
    }
  });
}
  /**
   * date validator
   * @param {*} date may be date or not
   * @returns {Boolean}
   */
  function isValidDate(date) {
    return date instanceof Date && !isNaN(date.getTime());
  }

function dformat(date){
  return (date<10)?'0'+date:date;
}


function setSiteTime() {
  let now = new Date();
  let run = new Date(window.config.Date);
  let $runTimes = document.getElementById("XMT_run_time");

  if (!isValidDate(run) || !$runTimes) {
    clearInterval(this.siteTime);
    $runTimes && $runTimes.parentNode.remove();
    return;
  }

  let runTime = (now - run) / 1000,
    days = Math.floor(runTime / 60 / 60 / 24),
    hours = Math.floor(runTime / 60 / 60 - 24 * days),
    minutes = Math.floor(runTime / 60 - 24 * 60 * days - 60 * hours),
    seconds = Math.floor((now - run) / 1000 - 24 * 60 * 60 * days - 60 * 60 * hours - 60 * minutes);
   // $runTimes.innerHTML = `${days}, ${(hours<10)?'0'+hours:hours}:${String(minutes).padStart(2, 0)}:${String(seconds).padStart(2, 0)}
   $runTimes.innerHTML = `${days}, ${dformat(hours)}:${dformat(minutes)}:${dformat(seconds)}`;
}

function initRunSiteTime() {
  if (window.config.Date) {
    this.siteTime = setInterval(setSiteTime, 500);
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        return clearInterval(this.siteTime);
      }
      this.siteTime = setInterval(setSiteTime, 500);
    }, false);
  }
}




function forEach(elements, handler) {
  elements = elements || [];
  for (let i = 0; i < elements.length; i++) {
    handler(elements[i]);
  }
}

function animateCSS(element, animation, reserved, callback) {
  !Array.isArray(animation) && (animation = [animation]);
  element.classList.add('animate__animated', ...animation);
  element.addEventListener('animationend', () => {
    !reserved && element.classList.remove('animate__animated', ...animation);
    typeof callback === 'function' && callback();
  }, { once: true });
}

function initHighlight() {
  var codeconfig = window.config.Code;

var ccr = document.querySelectorAll(".highlight");
//var ccr = document.querySelectorAll(".highlight > .chroma");
//document.querySelectorAll(".highlight > .chroma:not(:has(.code-header))")
	forEach(ccr, chroma =>{

    //创建一个chroma的div
    var n_div = document.createElement("div");
    n_div.className = "chroma";

    //获取所有pre标签，存放在chroma内
    var n_pre = chroma.querySelectorAll("pre")[0];
    n_pre.style.backgroundColor = "#f6f8fa";
    n_pre.classList.add('chroma');

    var tablewra = document.createElement("div");
    tablewra.className = "table-wrapper";


    tablewra.appendChild(n_pre);

    n_div.appendChild(tablewra);
    chroma.insertBefore(n_div, chroma.firstChild);

	let codeElements = chroma.querySelectorAll("pre > code");
    //let t = e.querySelectorAll("pre.chroma > code");
		if (codeElements.length) {
      var chr = chroma.querySelectorAll(".chroma")[0];
			let code = codeElements[codeElements.length - 1];
			let header = document.createElement("div");
			header.className = "code-header " + code.className.toLowerCase();
      let substr = code.className.toLowerCase().split("-");
			let s = document.createElement("span");
			s.classList.add("code-title"),
			s.insertAdjacentHTML("afterbegin", chroma.parentNode.title ? ` <i class="arrow fa-solid fa-chevron-right fa-fw" aria-hidden="true" > </i><span class="title-inner">${chroma.parentNode.title}</span > `: ' <i class="arrow fa-solid fa-chevron-right fa-fw" aria-hidden="true" > </i>'),
      s.insertAdjacentHTML('afterbegin', '<style>.'+code.className.toLowerCase()+' .code-title::after{ content: "'+ dictionary[substr[1]]+'"; }</style>');
			s.addEventListener("click", () =>{
				chr.classList.toggle("open")
			  },false),
      header.appendChild(s);
			let r = document.createElement("span");
			r.insertAdjacentHTML("afterbegin", '<i class="fa-solid fa-ellipsis-h fa-fw" aria-hidden="true"></i> '),
      r.classList.add("ellipses"),
      r.addEventListener("click", () =>{
				e.classList.add("open")
			},false), 
      header.appendChild(r);     
      
      //edit
      if (codeconfig["update"]) {
        const edit = document.createElement('span');
        edit.classList.add('edit');
        edit.insertAdjacentHTML('afterbegin', `<i class="fa-solid fa-key fa-fw" title="editUnLockTitle" aria-hidden="true"></i>`);
        edit.addEventListener('click', () => {
          const iconKey = edit.querySelector('.fa-key');
          const iconLock = edit.querySelector('.fa-lock');
          const preChromas = edit.parentElement.parentElement.querySelectorAll('pre.chroma');
          const preChroma = preChromas.length === 2 ? preChromas[1] : preChromas[0];
          if (iconKey) {
            iconKey.classList.add('fa-lock');
            iconKey.classList.remove('fa-key');
            iconKey.title = 'editLock';
            preChroma.setAttribute('contenteditable', true);
            preChroma.focus();
          } else {
            iconLock.classList.add('fa-key');
            iconLock.classList.remove('fa-lock');
            iconLock.title = 'editUnLock';
            preChroma.setAttribute('contenteditable', false);
            preChroma.blur();
          }
        }, false);
        header.appendChild(edit);
      }

      //copy
      if (codeconfig["copy"]) {
        var copy = document.createElement('span');
        copy.insertAdjacentHTML('afterbegin', '<i class="fa-regular fa-copy fa-fw" aria-hidden="true"></i>');
        copy.classList.add('copy');
        // remove the leading and trailing whitespace of the code string
        let codetext = code.innerText.trim();
        if (30 < 0 || codetext.split('\n').length < 30 + 2) {
          chr.classList.add('open');
        }
        copy.title = codeconfig["copy"];
        copy.addEventListener('click', () => {
          navigator.clipboard.writeText(codetext).then(() => {
            animateCSS(code, 'animate__flash');
          }, () => {
            console.error('Clipboard write failed!', 'Your browser does not support clipboard API!');
          });
        }, false);
        header.appendChild(copy);
      }

      //insert head
      chr.insertBefore(header, chr.firstChild);
      }
    });
    
}





function initTable() {
  forEach(document.querySelectorAll('.XMT_main table'), (table) => {
    let wrapper = document.createElement('div');
    wrapper.className = 'table-wrapper';
    table.parentElement.replaceChild(wrapper, table);
    wrapper.appendChild(table);
  });
}


function initChroma(){

}


let dictionary = {
  "abap": "ABAP",
  "abnf": "ABNF",
  "as": "ActionScript",
  "actionscript": "ActionScript",
  "as3": "ActionScript 3",
  "actionscript3": "ActionScript 3",
  "ada": "Ada",
  "ada95": "Ada",
  "ada2005": "Ada",
  "al": "AL",
  "ng2": "Angular2",
  "antlr": "ANTLR",
  "apacheconf": "ApacheConf",
  "aconf": "ApacheConf",
  "apache": "ApacheConf",
  "apl": "APL",
  "applescript": "AppleScript",
  "arduino": "Arduino",
  "armasm": "ArmAsm",
  "awk": "Awk",
  "gawk": "Awk",
  "mawk": "Awk",
  "nawk": "Awk",
  "ballerina": "Ballerina",
  "make": "Base Makefile",
  "makefile": "Base Makefile",
  "mf": "Base Makefile",
  "bsdmake": "Base Makefile",
  "bash": "Bash",
  "sh": "Bash",
  "ksh": "Bash",
  "zsh": "Bash",
  "shell": "Bash",
  "bash-session": "BashSession",
  "console": "BashSession",
  "shell-session": "BashSession",
  "bat": "Batchfile",
  "batch": "Batchfile",
  "dosbatch": "Batchfile",
  "winbatch": "Batchfile",
  "bib": "BibTeX",
  "bibtex": "BibTeX",
  "bicep": "Bicep",
  "blitzbasic": "BlitzBasic",
  "b3d": "BlitzBasic",
  "bplus": "BlitzBasic",
  "bnf": "BNF",
  "brainfuck": "Brainfuck",
  "bf": "Brainfuck",
  "c": "C",
  "csharp": "C#",
  "c\\#": "C#",
  "cpp": "C++",
  "c\\+\\+": "C++",
  "caddyfile": "Caddyfile",
  "caddy": "Caddyfile",
  "caddyfile-directives": "Caddyfile Directives",
  "caddyfile-d": "Caddyfile Directives",
  "caddy-d": "Caddyfile Directives",
  "capnp": "Cap'n Proto",
  "cassandra": "Cassandra CQL",
  "cql": "Cassandra CQL",
  "ceylon": "Ceylon",
  "cfengine3": "CFEngine3",
  "cf3": "CFEngine3",
  "cfs": "cfstatement",
  "chai": "ChaiScript",
  "chaiscript": "ChaiScript",
  "cheetah": "Cheetah",
  "spitfire": "Cheetah",
  "clojure": "Clojure",
  "clj": "Clojure",
  "cmake": "CMake",
  "cobol": "COBOL",
  "coffee-script": "CoffeeScript",
  "coffeescript": "CoffeeScript",
  "coffee": "CoffeeScript",
  "common-lisp": "Common Lisp",
  "cl": "Common Lisp",
  "lisp": "Common Lisp",
  "coq": "Coq",
  "cr": "Crystal",
  "crystal": "Crystal",
  "css": "CSS",
  "cython": "Cython",
  "pyx": "Cython",
  "pyrex": "Cython",
  "d": "D",
  "dart": "Dart",
  "diff": "Diff",
  "udiff": "Diff",
  "django": "Django/Jinja",
  "jinja": "Django/Jinja",
  "docker": "Docker",
  "dockerfile": "Docker",
  "dtd": "DTD",
  "dylan": "Dylan",
  "ebnf": "EBNF",
  "elixir": "Elixir",
  "ex": "Elixir",
  "exs": "Elixir",
  "elm": "Elm",
  "emacs": "EmacsLisp",
  "elisp": "EmacsLisp",
  "emacs-lisp": "EmacsLisp",
  "erlang": "Erlang",
  "factor": "Factor",
  "fennel": "Fennel",
  "fnl": "Fennel",
  "fish": "Fish",
  "fishshell": "Fish",
  "forth": "Forth",
  "fortran": "Fortran",
  "fortranfixed": "FortranFixed",
  "fsharp": "FSharp",
  "gas": "GAS",
  "asm": "GAS",
  "gdscript": "GDScript",
  "gd": "GDScript",
  "genshi": "Genshi",
  "kid": "Genshi",
  "xml\\+genshi": "Genshi",
  "xml\\+kid": "Genshi",
  "html\\+genshi": "Genshi HTML",
  "html\\+kid": "Genshi HTML",
  "genshitext": "Genshi Text",
  "cucumber": "Gherkin",
  "Cucumber": "Gherkin",
  "gherkin": "Gherkin",
  "Gherkin": "Gherkin",
  "glsl": "GLSL",
  "gnuplot": "Gnuplot",
  "go": "Go",
  "golang": "Go",
  "go-html-template": "Go HTML Template",
  "go-text-template": "Go Text Template",
  "graphql": "GraphQL",
  "graphqls": "GraphQL",
  "gql": "GraphQL",
  "groff": "Groff",
  "nroff": "Groff",
  "man": "Groff",
  "groovy": "Groovy",
  "handlebars": "Handlebars",
  "hbs": "Handlebars",
  "haskell": "Haskell",
  "hs": "Haskell",
  "hx": "Haxe",
  "haxe": "Haxe",
  "hxsl": "Haxe",
  "hcl": "HCL",
  "hexdump": "Hexdump",
  "hlb": "HLB",
  "html": "HTML",
  "http": "HTTP",
  "hylang": "Hy",
  "idris": "Idris",
  "idr": "Idris",
  "igor": "Igor",
  "igorpro": "Igor",
  "ini": "INI",
  "cfg": "INI",
  "dosini": "INI",
  "io": "Io",
  "j": "J",
  "java": "Java",
  "js": "JavaScript",
  "javascript": "JavaScript",
  "json": "JSON",
  "julia": "Julia",
  "jl": "Julia",
  "jungle": "Jungle",
  "kotlin": "Kotlin",
  "lighty": "Lighttpd configuration file",
  "lighttpd": "Lighttpd configuration file",
  "llvm": "LLVM",
  "lua": "Lua",
  "mako": "Mako",
  "md": "markdown",
  "mkd": "markdown",
  "mason": "Mason",
  "mathematica": "Mathematica",
  "mma": "Mathematica",
  "nb": "Mathematica",
  "matlab": "Matlab",
  "mcfunction": "mcfunction",
  "meson": "Meson",
  "meson\\.build": "Meson",
  "metal": "Metal",
  "minizinc": "MiniZinc",
  "MZN": "MiniZinc",
  "mzn": "MiniZinc",
  "mlir": "MLIR",
  "modula2": "Modula-2",
  "m2": "Modula-2",
  "monkeyc": "MonkeyC",
  "morrowind": "MorrowindScript",
  "mwscript": "MorrowindScript",
  "myghty": "Myghty",
  "mysql": "MySQL",
  "mariadb": "MySQL",
  "nasm": "NASM",
  "newspeak": "Newspeak",
  "nginx": "Nginx configuration file",
  "nim": "Nim",
  "nimrod": "Nim",
  "nixos": "Nix",
  "nix": "Nix",
  "objective-c": "Objective-C",
  "objectivec": "Objective-C",
  "obj-c": "Objective-C",
  "objc": "Objective-C",
  "ocaml": "OCaml",
  "octave": "Octave",
  "ones": "OnesEnterprise",
  "onesenterprise": "OnesEnterprise",
  "1S": "OnesEnterprise",
  "1S:Enterprise": "OnesEnterprise",
  "openedge": "OpenEdge ABL",
  "abl": "OpenEdge ABL",
  "progress": "OpenEdge ABL",
  "openedgeabl": "OpenEdge ABL",
  "openscad": "OpenSCAD",
  "org": "Org Mode",
  "orgmode": "Org Mode",
  "pacmanconf": "PacmanConf",
  "perl": "Perl",
  "pl": "Perl",
  "php": "PHP",
  "php3": "PHP",
  "php4": "PHP",
  "php5": "PHP",
  "phtml": "PHTML",
  "pig": "Pig",
  "pkgconfig": "PkgConfig",
  "plpgsql": "PL/pgSQL",
  "text": "plaintext",
  "plain": "plaintext",
  "no-highlight": "plaintext",
  "plutus-core": "Plutus Core",
  "plc": "Plutus Core",
  "pony": "Pony",
  "postgresql": "PostgreSQL SQL dialect",
  "postgres": "PostgreSQL SQL dialect",
  "postscript": "PostScript",
  "postscr": "PostScript",
  "pov": "POVRay",
  "powerquery": "PowerQuery",
  "pq": "PowerQuery",
  "powershell": "PowerShell",
  "posh": "PowerShell",
  "ps1": "PowerShell",
  "psm1": "PowerShell",
  "psd1": "PowerShell",
  "prolog": "Prolog",
  "promql": "PromQL",
  "protobuf": "Protocol Buffer",
  "proto": "Protocol Buffer",
  "puppet": "Puppet",
  "python": "Python",
  "py": "Python",
  "sage": "Python",
  "python3": "Python",
  "py3": "Python",
  "python2": "Python 2",
  "py2": "Python 2",
  "qbasic": "QBasic",
  "basic": "QBasic",
  "qml": "QML",
  "qbs": "QML",
  "splus": "R",
  "s": "R",
  "r": "R",
  "racket": "Racket",
  "rkt": "Racket",
  "ragel": "Ragel",
  "perl6": "Raku",
  "pl6": "Raku",
  "raku": "Raku",
  "jsx": "react",
  "react": "react",
  "reason": "ReasonML",
  "reasonml": "ReasonML",
  "registry": "reg",
  "rst": "reStructuredText",
  "rest": "reStructuredText",
  "restructuredtext": "reStructuredText",
  "rexx": "Rexx",
  "arexx": "Rexx",
  "rb": "Ruby",
  "ruby": "Ruby",
  "duby": "Ruby",
  "rust": "Rust",
  "rs": "Rust",
  "sas": "SAS",
  "sass": "Sass",
  "scala": "Scala",
  "scheme": "Scheme",
  "scm": "Scheme",
  "scilab": "Scilab",
  "scss": "SCSS",
  "sieve": "Sieve",
  "smalltalk": "Smalltalk",
  "squeak": "Smalltalk",
  "st": "Smalltalk",
  "smarty": "Smarty",
  "snobol": "Snobol",
  "sol": "Solidity",
  "solidity": "Solidity",
  "sparql": "SPARQL",
  "sql": "SQL",
  "squidconf": "SquidConf",
  "squid\\.conf": "SquidConf",
  "squid": "SquidConf",
  "sml": "Standard ML",
  "stylus": "Stylus",
  "svelte": "Svelte",
  "swift": "Swift",
  "systemd": "SYSTEMD",
  "systemverilog": "systemverilog",
  "sv": "systemverilog",
  "tablegen": "TableGen",
  "tasm": "TASM",
  "tcl": "Tcl",
  "tcsh": "Tcsh",
  "csh": "Tcsh",
  "termcap": "Termcap",
  "terminfo": "Terminfo",
  "terraform": "Terraform",
  "tf": "Terraform",
  "tex": "TeX",
  "latex": "TeX",
  "thrift": "Thrift",
  "toml": "TOML",
  "tradingview": "TradingView",
  "tv": "TradingView",
  "tsql": "Transact-SQL",
  "t-sql": "Transact-SQL",
  "turing": "Turing",
  "turtle": "Turtle",
  "twig": "Twig",
  "ts": "TypeScript",
  "tsx": "TypeScript",
  "typescript": "TypeScript",
  "typoscript": "TypoScript",
  "typoscriptcssdata": "TypoScriptCssData",
  "typoscripthtmldata": "TypoScriptHtmlData",
  "v": "verilog",
  "vlang": "V",
  "vsh": "V shell",
  "vshell": "V shell",
  "vb\\.net": "VB.net",
  "vbnet": "VB.net",
  "verilog": "verilog",
  "vhdl": "VHDL",
  "vim": "VimL",
  "vue": "vue",
  "vuejs": "vue",
  "whiley": "Whiley",
  "xml": "XML",
  "xorg\\.conf": "Xorg",
  "yaml": "YAML",
  "yang": "YANG",
  "zed": "Zed",
  "zig": "Zig",
  "markdown": "markdown",
  "yml": "YAML"
};

function gototop(){
  //scroll 事件适用于所有可滚动的元素和 window 对象（浏览器窗口）。
  $(window).scroll(function() {
    var scrollt = document.documentElement.scrollTop + document.body.scrollTop; //获取滚动后的高度
 
    if( scrollt >1200 ){  //判断滚动后高度超过200px,就显示

        $("#back_top").fadeIn(400); //淡入

    }else{

        $("#back_top").stop().fadeOut(400); //如果返回或者没有超过,就淡出.必须加上stop()停止之前动画,否则会出现闪动

    }
      });
      /*点击返回顶部*/
      $("#back_top").click(function(){ //当点击标签的时候,使用animate在200毫秒的时间内,滚到顶部
 
        $("html,body").animate({scrollTop:"0px"},200);
 
    }); 
 
}


function randomPostImg(thisPic){
  /*fetch('/txt/rimg.txt')
  .then(response => response.text())
  .then(content => {
      // 对文件内容进行处理
      // 将文本分割成行数组
      const lines = content.split('\n');
      // 获取随机行数
      var randomNum = Math.floor(Math.random() * 42) + 1; // 使用Math.floor()函数将小数向下取整，并加上起始点值
      const randomLine = lines[randomNum];
      thisPic.src=randomLine;
  })
  .catch(error => console.log(error));*/
  var randomNum = 0;
  do {
    randomNum = Math.floor(Math.random() * 42) + 1;
  } while (isNumberInArray(globaImglArray,randomNum));

  globaImglArray.push(randomNum);
  thisPic.src="/rimg/"+randomNum+".jpg";

}



function isNumberInArray(array, number) {
  return array.indexOf(number) !== -1;
}